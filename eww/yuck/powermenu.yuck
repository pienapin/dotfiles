(defwidget profile []
	(box 
		:class "profile-box" 
		:space-evenly false 
    :spacing 10
    (box 
      :class "profile-img" 
      :style "background-image: url('${profile-image}');"
    )
    (box
      :orientation "v"
      :hexpand true
      (box 
        :class "profile-info" 
        :space-evenly false 
        :orientation "v" 
        :spacing 5
        :valign "start"
        (label 
          :class "profile-name" 
          :text profile-name 
          :halign "start"
        )
        (box
          :space-evenly false
          :spacing 5
          (label :text "")
          (label 
            :class "profile-infos" 
            :text uptime 
            :halign "start"
          )
        )
      )
      (box :valign "end" :halign "end" (power))
    )
	)
)

(defwidget power []
  (eventbox 
		:onhover "eww update power-rev=true" 
		:onhoverlost "eww update power-rev=false"
    (box 
      :class "power-box"
      :space-evenly false
      (eventbox
        :cursor "pointer"
        (button 
          :class "shutdown" 
          :onclick "systemctl poweroff -i" 
          ""
        )
      )
      (revealer
        :class "power-rev"
        :transition "slideright" 
        :reveal power-rev 
        :duration "500ms"
        (box
          :spacing 10
          (eventbox
            :cursor "pointer"
            (button 
              :class "reboot" 
              :onclick "systemctl reboot -i" 
              "󰜉"
            )
          )
          (eventbox
            :cursor "pointer"
            (button 
              :class "suspend" 
              :onclick "systemctl suspend" 
              ""
            )
          )
          (eventbox
            :cursor "pointer"
            (button 
              :class "exit" 
              :onclick "bspc quit" 
              "󰩈"
            )
          )
        )
      )
    )
  )
)

(defwidget net-graph []
  (box
    :class "net-graph-box"
    (overlay 
      (graph 
        :class "net-graph" 
        :height 100 
        :min 0
        :thickness 3 
        :value {round(EWW_NET.enp4s0.NET_DOWN / 1000000, 0)} 
        :dynamic "true" 
        :time-range "10s"
      )
      (label 
        :class "net-graph-mb"
        :text "${round(EWW_NET.enp4s0.NET_DOWN / 1000000, 2)}MB"
        :halign "start"
        :valign "start"
      )
      (label 
        :class "net-graph-i"
        :text ""
        :halign "start"
        :valign "end"
      )
    )
  )
)

(defwidget pacman []
  (box
    :class "pacman"
    :space-evenly false
    :orientation "v"
    :spacing 10
    :hexpand true
    (label 
      :class "pacman-icon"
      :halign "start"
      :valign "start"
      :text "󰮯"
    )
    (box
      :space-evenly false
      :spacing 5
      (label
        :class "pacman-updates"
        :halign "start"
        :text updates
      )
      (label
        :class "updates"
        :halign "start"
        :text "updates"
      )
    )
  )
)

(defwidget utils []
  (box
    :class "fetch"
    :space-evenly false
    :spacing 15
    (label
      :class "arch"
      :text "󰣇"
    )
    (box
      :space-evenly false
      :spacing 10
      (box
        :orientation "v"
        (label
          :class "osi"
          :text "󰠄"
        )
        (label
          :class "wmi"
          :text "󰕮"
        )
        (label
          :class "pki"
          :text "󰮯"
        )
      )
      (box
        :orientation "v"
        (label
          :class "os"
          :text "arch"
          :justify "left"
          :xalign 0
        )
        (label
          :class "wm"
          :text "bspwm"
          :justify "left"
          :xalign 0
        )
        (label
          :class "pk"
          :text packages
          :justify "left"
          :xalign 0
        )
      )
    )
  )
)

(defwidget memory []
	(box 
		:class "memory-box"
    :space-evenly false
		:spacing 6
    :orientation "v"
		(circular-progress  
			:class "memory-progress"
			:value {round(EWW_RAM.used_mem_perc, 0)}
			:clockwise false
			:thickness 8
      (box (label :class "memory-inside" :text ""))
		)
    (label 
      :class "memory-info"
      :halign "center"
      :valign "end"
      :text "${round(EWW_RAM.used_mem / 1048576, 0)}MB"
    )
	)
)

(defwidget cpu []
	(box 
		:class "cpu-box" 
		:space-evenly false
		:spacing 6
    :orientation "v"
		(circular-progress 
			:class "cpu-progress" 
			:value {round(EWW_CPU.avg, 0)} 
			:thickness 8
      (box (label :class "cpu-inside" :text ""))
		)
    (label
      :class "cpu-info"
      :halign "center"
      :valign "end"
      :text "${round(EWW_CPU.avg, 1)}%"
    )
	)
)

(defwidget temp []
	(box 
		:class "temp-box" 
		:spacing 6
    :space-evenly false
    :orientation "v"
		(circular-progress 
			:class "temp-progress" 
			:value {round(EWW_TEMPS.AMDGPU_EDGE, 0)} 
			:thickness 8
      (box (label :class "temp-inside" :text ""))
		)
    (label
      :class "temp-info"
      :halign "center"
      :valign "end"
      :text "${round(EWW_TEMPS.AMDGPU_EDGE, 1)}°C"
    )
	)
)

(defwidget disk []
	(box 
		:class "disk-box" 
		:space-evenly false
		:spacing 6
    :orientation "v"
		(circular-progress 
			:class "disk-progress" 
			:value {round(EWW_DISK["/"].used_perc, 0)} 
			:thickness 8
      (box (label :class "disk-inside" :text ""))
		)
    (label
      :class "disk-info"
      :halign "center"
      :valign "end"
      :text "${round(EWW_DISK["/"].used / 1073741824, 1)}GB / ${round(EWW_DISK["/"].total / 1073741824, 1)}GB"
    )
	)
)

(defwidget system []
  (box 
    :class "system"
    :orientation "v"
    :spacing 10
    (box 
      :spacing 10
      (memory)
      (cpu)
    )
    (box 
      :spacing 10
      (temp)
      (disk)
    )
  )
)


(defwidget powermenu []
  (box
    :class "menu"
    :space-evenly false
    :orientation "v"
    :spacing 10
    (profile)
    (box :space-evenly false :spacing 10 (pacman) (utils))
    (system)
  )
)

(defwindow powermenu
	:wm-ignore false
	:geometry (geometry :y "7%" :x "-3%" :width "20%" :anchor "top right")
	(powermenu)
)
